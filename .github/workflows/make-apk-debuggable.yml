name: Make APK Debuggable

on:
  workflow_dispatch:
    inputs:
      apk_url:
        description: Direct download URL of the APK to modify
        required: true
        type: string

permissions:
  contents: read

jobs:
  modify-apk:
    name: Download, Decompile, Patch, Rebuild, Sign
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      BUILD_TOOLS_VERSION: 34.0.0
      APKTOOL_VERSION: 2.9.3

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate input
        run: |
          if [ -z "${{ github.event.inputs.apk_url }}" ]; then
            echo "apk_url input is empty"
            exit 1
          fi
          echo "APK URL: ${{ github.event.inputs.apk_url }}"

      - name: Install base dependencies
        run: |
            sudo apt-get update
            sudo apt-get install -y --no-install-recommends \
              wget unzip zip lib32stdc++6 lib32z1 openjdk-17-jdk xmlstarlet
            java -version
            xmlstarlet --version

      - name: Set up Android commandline tools
        run: |
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          cd "$ANDROID_SDK_ROOT"
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O cmdtools.zip
          unzip -q cmdtools.zip
          rm cmdtools.zip
          mv cmdline-tools cmdline-tools/latest
          yes | cmdline-tools/latest/bin/sdkmanager --sdk_root="$ANDROID_SDK_ROOT" \
            "platform-tools" "build-tools;$BUILD_TOOLS_VERSION"
          echo "$ANDROID_SDK_ROOT/platform-tools" >> "$GITHUB_PATH"
          echo "$ANDROID_SDK_ROOT/build-tools/$BUILD_TOOLS_VERSION" >> "$GITHUB_PATH"

      - name: Install apktool
        run: |
          sudo wget -q https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool -O /usr/local/bin/apktool
          sudo chmod +x /usr/local/bin/apktool
          sudo wget -q https://github.com/iBotPeaches/Apktool/releases/download/v${APKTOOL_VERSION}/apktool_${APKTOOL_VERSION}.jar -O /usr/local/lib/apktool.jar
          apktool --version

      - name: Download APK
        id: download
        run: |
          set -e
          mkdir -p original
          cd original
          curl -L -o app.apk "${{ github.event.inputs.apk_url }}"
          if [ ! -s app.apk ]; then
            echo "Downloaded APK is empty"
            exit 1
          fi
          file app.apk || true
          echo "size=$(stat -c%s app.apk)" >> "$GITHUB_OUTPUT"
          echo "Downloaded APK size: $(stat -c%s app.apk) bytes"

      - name: Decompile APK
        run: |
          set -e
          mkdir -p work
          apktool d -f original/app.apk -o work/decompiled

      - name: Patch AndroidManifest (xmlstarlet)
        run: |
          set -e
          MANIFEST="work/decompiled/AndroidManifest.xml"
          if [ ! -f "$MANIFEST" ]; then
            echo "Manifest not found"
            exit 1
          fi
          echo "Before patch (first application line):"
          grep -n "<application" "$MANIFEST" | head -1 || true
          # Add android:debuggable if missing
          xmlstarlet ed -P -L \
            -N a="http://schemas.android.com/apk/res/android" \
            -s "/manifest/application[not(@a:debuggable)]" -t attr -n "android:debuggable" -v "true" \
            "$MANIFEST"
          # Force value to true
            xmlstarlet ed -P -L \
              -N a="http://schemas.android.com/apk/res/android" \
              -u "/manifest/application/@a:debuggable" -v "true" \
              "$MANIFEST"
          echo "After patch (first application line):"
          grep -n "<application" "$MANIFEST" | head -1 || true
          echo -n "Final debuggable attribute value: "
          xmlstarlet sel -N a="http://schemas.android.com/apk/res/android" -t -v "string(/manifest/application/@a:debuggable)" -n "$MANIFEST"

      - name: Rebuild APK
        run: |
          set -e
          apktool b work/decompiled -o modified-unaligned.apk
          ls -lh modified-unaligned.apk

      - name: Zipalign APK
        run: |
          set -e
          ZIPALIGN=$(command -v zipalign || echo "$ANDROID_SDK_ROOT/build-tools/$BUILD_TOOLS_VERSION/zipalign")
          "$ZIPALIGN" -f -p 4 modified-unaligned.apk modified-aligned.apk
          ls -lh modified-aligned.apk

      - name: Generate signing key (debug)
        run: |
          set -e
          keytool -genkeypair -v \
            -keystore debug.keystore \
            -storepass android \
            -keypass android \
            -alias androiddebugkey \
            -keyalg RSA -keysize 2048 -validity 10000 \
            -dname "CN=Android Debug,O=Android,C=US"
          ls -lh debug.keystore

      - name: Sign APK
        run: |
          set -e
          APKSIGNER=$(command -v apksigner || echo "$ANDROID_SDK_ROOT/build-tools/$BUILD_TOOLS_VERSION/apksigner")
          "$APKSIGNER" sign \
            --ks debug.keystore \
            --ks-pass pass:android \
            --key-pass pass:android \
            --out modified-signed.apk \
            modified-aligned.apk
          "$APKSIGNER" verify --print-certs modified-signed.apk
          ls -lh modified-signed.apk

      - name: Compute checksums
        run: |
          sha256sum original/app.apk > original_apk.sha256
          sha256sum modified-signed.apk > modified_apk.sha256
          echo "Original APK SHA256:"
          cat original_apk.sha256
          echo "Modified APK SHA256:"
          cat modified_apk.sha256

      - name: Upload modified APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: modified-debuggable-apk
          path: |
            modified-signed.apk
            modified_apk.sha256
            original_apk.sha256
          if-no-files-found: error
          retention-days: 7

      - name: Summary
        run: |
          echo "Process complete."
          echo "Modified, zipaligned, and signed APK saved as modified-signed.apk"
          echo "SHA256:"
          cat modified_apk.sha256
          echo "Note: Use only on APKs you are authorized to analyze and modify."
